title: 连连看思路
date: 2014-03-02 11:15:19
updated: 2014-03-02 11:15:19
comments: true
comment: true
categories: 开发
tags: [连连看,算法]
slug: llk

---

{% qnimg llk/llk-howto.jpg alt:连连看应该怎么算 %}

最近看一个朋友在研究**A\*算法**，
然后得知他打算用**A\***做连连看的配对算法。

OMG！连连看需要这么高大上？雷煞我等屌丝！
So，回顾一下大学时写的乞丐版连连看思路。

<!--more-->

## 连连看规则

1. 相同的方块才可以连接消除
2. 连接路径上不能有其他方块
3. 连接路径最多有两个拐点（最多三条线）

## 假设场景

先来看一个场景:
A、B方块相同，坐标分别为(C1,R0)和(C5,R2)。
{%qnimg llk/sence.png title:场景示例 alt:场景示例 %}

## 连接方式

我们看一下可能的连接方式：

* {%qnimg llk/llk-01.png title:一个拐点 alt:一个拐点 %}
* {%qnimg llk/llk-02.png title:一个拐点 alt:一个拐点 %}
* {%qnimg llk/llk-03.png title:之字拐点 alt:之字拐点 %}
* {%qnimg llk/llk-04.png title:C型拐点 alt:C型拐点 %}

还有就是连连看允许线从地图外面划过，
为了方便处理我们把地图外面补一圈（绿框部分是真正的游戏区域）

* {%qnimg llk/llk-05.png title:C型左边出界 alt:C型左边出界 %}
* {%qnimg llk/llk-06.png title:C型右边出界 alt:C型右边出界 %}

## 找规律

上面的情况是按表面的复杂程度排序，
但只要把顺序调整一下其实就是下面这张图：

* {%qnimg llk/llk-r1.png title:横向分解 alt:横向分解 %}

当然还有没有画出来的纵向的情况：

* {%qnimg llk/llk-r2.png title:纵向分解 alt:纵向分解 %}

## 算法实现

关于算法实现就简单了，只要找到四条关键线以及每次对应的两个关键点，
然后直接判断之间是否有障碍物就搞定了，
当然还有一些特殊情况需要处理，比如两个方块在一条线上，
不过这些都是一些特例了，不特殊处理也就是浪费点计算资源而已

说起计算资源其实还有挺多可以挖掘的地方：
比如横纵两种方式就有一些路径是完全重复的，
又比如纵向分解图里(C2,R3)如果有障碍物那下面的三条路径都不需要判断了等等

不过话说对于连连看这种计算量很小的情况其实不用那么抠门了

有兴趣可以看看我大学时写的连连看游戏和外挂，
我还写了个QQ连连看游戏的外挂，无聊的人可以试试效果哦


[屌丝版连连看:https://github.com/gyk001/LLK](https://github.com/gyk001/LLK)
[QQ连连看外挂:https://github.com/gyk001/QQ_LLK_Cheat](https://github.com/gyk001/QQ_LLK_Cheat)

